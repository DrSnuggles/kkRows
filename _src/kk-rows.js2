</style>
<div id="kkOuter">
	<input id="fInput" placeholder="Type search term"/>
	<input type="range" id="myTblScroll" min="0" max="1" step="0.0000001" value="0"/>
	<div id="myTblDiv"></div>
</div>
`

window.kkRowsCallback = (o, cb) => {
	// bit hacky in window global but onclick needs that
	let j
	if (o.parentElement) {
		j = {
			from: o.parentElement.parentElement.getRootNode().host.id,
			sel: o.innerText,
		}
		o.parentElement.querySelectorAll('td').forEach((td, ind) => {
			j[ind] = td.innerHTML
		})
	} else {
		// random or next/prev, feels even more hacky
		j = {
			rng: o,
		}
	}
	cb(j)
}

export class kkRows extends HTMLElement {
	static get observedAttributes() {
		return ['data', 'src', 'head', 'cb', 'hide', 'css']
	}

	constructor() {
		super()
		this._shadowRoot = this.attachShadow({mode: 'closed'}) // with closed, a ShadowRoot reference needs to be stored
		//this.attachShadow({mode: 'open'}) // open or closed
		this._shadowRoot.appendChild(template.content.cloneNode(true))
		this.initWorker()
		this.initHandler()
	}

	initWorker() {
		//const worker = new Worker(location.origin +'/kkRows/js/worker.js', {type: 'module'})

		// ToDo: inline worker would reduce another request, best pre tersered
		const blob = new Blob([`